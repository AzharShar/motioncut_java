import java.util.Scanner;

// Story class to hold the narrative and decision points
class Story {
    private String narrative;
    private String[] options;
    private int[] outcomes;

    public Story(String narrative, String[] options, int[] outcomes) {
        this.narrative = narrative;
        this.options = options;
        this.outcomes = outcomes;
    }

    public String getNarrative() {
        return narrative;
    }

    public String[] getOptions() {
        return options;
    }

    public int[] getOutcomes() {
        return outcomes;
    }
}

// Game class to manage the overall flow of the game
public class TextAdventure {
    private static final Scanner scanner = new Scanner(System.in);
    private static Story[] stories;
    private static int currentStoryIndex = 0;

    public static void main(String[] args) {
        // Initialize the stories
        initializeStories();

        // Start the game
        startGame();
    }

    private static void initializeStories() {
        // Define the stories, options, and outcomes
        stories = new Story[] {
            new Story(
                "You find yourself in a dark forest. Which path do you take?",
                new String[] {"Left", "Right"},//first choice
                new int[] {1, 2}
            ),
            new Story(
                "You come across a mysterious cabin. Do you enter?",
                new String[] {"Yes", "No"},
                new int[] {3, 4}
            ),
            // Add more stories as needed
        };
    }

    private static void startGame() {
        while (currentStoryIndex < stories.length) {
            Story currentStory = stories[currentStoryIndex];
            System.out.println(currentStory.getNarrative());

            // Display the options
            for (int i = 0; i < currentStory.getOptions().length; i++) {
                System.out.println((i + 1) + ". " + currentStory.getOptions()[i]);
            }

            // Get user input
            int choice = getUserInput(currentStory.getOptions().length);

            // Update the current story index based on the user's choice
            currentStoryIndex = currentStory.getOutcomes()[choice - 1];
        }

        System.out.println("The game has ended.");
    }

    private static int getUserInput(int maxOptions) {
        while (true) {
            System.out.print("Enter your choice (1-" + maxOptions + "): ");
            if (scanner.hasNextInt()) {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character
                if (choice >= 1 && choice <= maxOptions) {
                    return choice;
                } else {
                    System.out.println("Invalid choice. Please try again.");
                }
            } else {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
            }
        }
    }
}
